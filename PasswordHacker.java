import java.io.*;

public class PasswordHacker {
	public static void main(String[] args) {
		int numberOfDivisions = 4*32;
		int directoryCounter = 0;
		int filesCreatedCounter = 0;
		String[] tableX2 = {"a", "a", "b", "b", "c", "c", "d", "d", "e", "e", "f", "f", "g", "g", "h", "h", "i", "i", "j", "j", "k", "k", "l", "l", "m", "m", "n", "n", "o", "o", "p", "p", "q", "q", "r", "r", "s", "s", "t", "t", "u", "u", "v", "v", "w", "w", "x", "x", "y", "y", "z", "z", "A", "A", "B", "B", "C", "C", "D", "D", "E", "E", "F", "F", "G", "G", "H", "H", "I", "I", "J", "J", "K", "K", "L", "L", "M", "M", "N", "N", "O", "O", "P", "P", "Q", "Q", "R", "R", "S", "S", "T", "T", "U", "U", "V", "V", "W", "W", "X", "X", "Y", "Y", "Z", "Z", "0", "0", "1", "1", "2", "2", "3", "3", "4", "4", "5", "5", "6", "6", "7", "7", "8", "8", "9", "9"};
		//String[] table = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
		String[] cores = {"A", "B", "C", "D"};
		try{
			for(int i=1; i<=(numberOfDivisions/4-1); i++)
			{
				File file = new File(Integer.toString(i));
				boolean exists = file.exists();
				if(!exists)
				{
					boolean success = (new File(Integer.toString(i))).mkdir();
					if(success)
					{
						directoryCounter++;
					}
				}
			}
			System.out.println(directoryCounter + " directories were created.");
			
			for(int i=1; i<=(numberOfDivisions/4-1); i++)
			{
				for(int j=0; j<=cores.length-1; j++)
				{
					FileWriter fstream = new FileWriter(i + "/PasswordHacker" + cores[j] + ".java");
					BufferedWriter writer = new BufferedWriter(fstream);
					//PrintWriter writer = new PrintWriter(i + "/password" + cores[j] + ".java");
					writer.write("import java.security.*;");
					writer.newLine();
					writer.write("import java.util.*;");
					writer.newLine();
					writer.write("import java.io.*;\n");
					writer.newLine();
					writer.write("public class PasswordHacker" + cores[j]);
					writer.newLine();
					writer.write("{\n");
					writer.newLine();
					writer.write("	public static int loadH(String[] tableForH, int marker)");
					writer.newLine();
					writer.write("	{");
					writer.newLine();
					writer.write("		try");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			BufferedReader in = new BufferedReader(new FileReader(\"saves" + cores[j] + ".txt\"));");
					writer.newLine();
					writer.write("			String progress = in.readLine();");
					writer.newLine();
					writer.write("			in.close();");
					writer.newLine();
					writer.write("			String character = progress.substring(marker-1, marker);");
					writer.newLine();
					writer.write("			for(int a = 0; a <= 30; a++)");
					writer.newLine();
					writer.write("			{");
					writer.newLine();
					writer.write("				if(character.equals(tableForH[a]))");
					writer.newLine();
					writer.write("				{");
					writer.newLine();
					writer.write("					return a;");
					writer.newLine();
					writer.write("				}");
					writer.newLine();
					writer.write("			}");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("		catch(Exception e)");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			System.out.println(\"Error in load: \" + e.getMessage());	");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("		return 0;");
					writer.newLine();
					writer.write("	}\n");
					writer.newLine();
					writer.write("	public static int load(String[] table, int marker)");
					writer.newLine();
					writer.write("	{");
					writer.newLine();
					writer.write("		try");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			BufferedReader in = new BufferedReader(new FileReader(\"saves" + cores[j] + ".txt\"));");
					writer.newLine();
					writer.write("			String progress = in.readLine();");
					writer.newLine();
					writer.write("			in.close();");
					writer.newLine();
					writer.write("			String character = progress.substring(marker-1, marker);");
					writer.newLine();
					writer.write("			for(int a = 0; a <= 61; a++)");
					writer.newLine();
					writer.write("			{");
					writer.newLine();
					writer.write("				if(character.equals(table[a]))");
					writer.newLine();
					writer.write("				{");
					writer.newLine();
					writer.write("					return a;");
					writer.newLine();
					writer.write("				}");
					writer.newLine();
					writer.write("			}");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("		catch(Exception e)");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			System.out.println(\"Error in load: \" + e.getMessage());	");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("		return 0;");
					writer.newLine();
					writer.write("	}\n");
					writer.newLine();
					writer.write("	public static void save(String guess)");
					writer.newLine();
					writer.write("	{");
					writer.newLine();
					writer.write("		try");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			FileWriter fstream = new FileWriter(\"saves" + cores[j] + ".txt\");");
					writer.newLine();
					writer.write("			BufferedWriter out = new BufferedWriter(fstream);");
					writer.newLine();
					writer.write("			out.write(guess);");
					writer.newLine();
					writer.write("			out.close();");
					writer.newLine();
					writer.write("		} catch (Exception e)");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			System.out.println(\"Error in save: \" + e.getMessage());");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("	}");
					writer.newLine();
					writer.write("	public static void main(String[] args) throws NoSuchAlgorithmException");
					writer.newLine();
					writer.write("	{");
					writer.newLine();
					writer.write("		int h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;");
					writer.newLine();
					writer.write("		boolean isLoading = false;");
					writer.newLine();
					writer.write("		String[] table = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",");
					writer.newLine();
					writer.write("				\"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\",");
					writer.newLine();
					writer.write("				\"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",");
					writer.newLine();
					writer.write("				\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",");
					writer.newLine();
					writer.write("				\"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\",");
					writer.newLine();
					writer.write("				\"6\", \"7\", \"8\", \"9\" };");
					writer.newLine();
					
					if(filesCreatedCounter%2 == 0)
					{
						writer.write("		String[] tableForH = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\",	\"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\"};");
					}
					else if(filesCreatedCounter%2 == 1)
					{
						writer.write("		String[] tableForH = {\"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"};");
					}
					
					writer.newLine();
					writer.write("		MessageDigest md = MessageDigest.getInstance(\"SHA-256\");");
					writer.newLine();
					writer.write("		byte[] password = { -37, 117, -114, -117, 109, 51, 109, 97, -8, -123,");
					writer.newLine();
					writer.write("				-12, 103, 31, 64, 7, 23, 44, 99, 9, -105, -115, -92, 17, -56,");
					writer.newLine();
					writer.write("				37, 69, -117, 10, 90, 124, 83, 26 };");
					writer.newLine();
					writer.write("		String guess = \"" + tableX2[filesCreatedCounter] + "\";");
					writer.newLine();
					writer.write("		boolean foundPassword = false;");
					writer.newLine();
					writer.write("		long startTime = System.currentTimeMillis(), endTime = 0;");
					writer.newLine();
					writer.write("		File file = new File(\"saves" + cores[j] + ".txt\");");
					writer.newLine();
					writer.write("		boolean exists = file.exists();");
					writer.newLine();
					writer.write("		if(exists)");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			isLoading = true;");
					writer.newLine();
					writer.write("			h = loadH(table, 2);");
					writer.newLine();
					writer.write("		    i = load(table, 3);");
					writer.newLine();
					writer.write("			j = load(table, 4);");
					writer.newLine();
					writer.write("			k = load(table, 5);");
					writer.newLine();
					writer.write("			l = load(table, 6);");
					writer.newLine();
					writer.write("			m = load(table, 7);");
					writer.newLine();
					writer.write("			n = load(table, 8);");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("		while(true)");
					writer.newLine();
					writer.write("		{");
					writer.newLine();
					writer.write("			while(h <= 30)");
					writer.newLine();
					writer.write("			{");
					writer.newLine();
					writer.write("				String first = tableForH[h];");
					writer.newLine();
					writer.write("				guess = guess + first;");
					writer.newLine();
					writer.write("			    if(isLoading == false)");
					writer.newLine();
					writer.write("			    {");
					writer.newLine();
					writer.write("					i = 0;");
					writer.newLine();
					writer.write("				}");
					writer.newLine();
					writer.write("				while(i <= 61)");
					writer.newLine();
					writer.write("				{");
					writer.newLine();
					writer.write("					String second = table[i];");
					writer.newLine();
					writer.write("					guess = guess + second;");
					writer.newLine();
					writer.write("					if(isLoading == false)");
					writer.newLine();
					writer.write("					{");
					writer.newLine();
					writer.write("						j = 0;");
					writer.newLine();
					writer.write("					}");
					writer.newLine();
					writer.write("					while(j <= 61)");
					writer.newLine();
					writer.write("					{");
					writer.newLine();
					writer.write("						String third = table[j];");
					writer.newLine();
					writer.write("						guess = guess + third;");
					writer.newLine();
					writer.write("						if(isLoading == false)");
					writer.newLine();
					writer.write("						{");
					writer.newLine();
					writer.write("							k = 0;");
					writer.newLine();
					writer.write("						}");
					writer.newLine();
					writer.write("						while(k <= 61)");
					writer.newLine();
					writer.write("						{");
					writer.newLine();
					writer.write("							String fourth = table[k];");
					writer.newLine();
					writer.write("							guess = guess + fourth;");
					writer.newLine();
					writer.write("							if(isLoading == false)");
					writer.newLine();
					writer.write("							{");
					writer.newLine();
					writer.write("								l = 0;");
					writer.newLine();
					writer.write("							}");
					writer.newLine();
					writer.write("							while(l <= 61)");
					writer.newLine();
					writer.write("							{");
					writer.newLine();
					writer.write("								String fifth = table[l];");
					writer.newLine();
					writer.write("								guess = guess + fifth;");
					writer.newLine();
					writer.write("								if(isLoading == false)");
					writer.newLine();
					writer.write("								{");
					writer.newLine();
					writer.write("									m = 0;");
					writer.newLine();
					writer.write("								}");
					writer.newLine();
					writer.write("								while(m <= 61)");
					writer.newLine();
					writer.write("								{");
					writer.newLine();
					writer.write("									String sixth = table[m];");
					writer.newLine();
					writer.write("									guess = guess + sixth;");
					writer.newLine();
					writer.write("									if(isLoading == false)");
					writer.newLine();
					writer.write("									{");
					writer.newLine();
					writer.write("										n = 0;");
					writer.newLine();
					writer.write("									}");
					writer.newLine();
					writer.write("									isLoading = false;");
					writer.newLine();
					writer.write("									while(n <= 61)");
					writer.newLine();
					writer.write("									{");
					writer.newLine();
					writer.write("										String seventh = table[n];");
					writer.newLine();
					writer.write("										guess = guess + seventh;");
					writer.newLine();
					writer.write("										endTime = System.currentTimeMillis();");
					writer.newLine();
					writer.write("										if ((endTime - startTime) > 1000)");
					writer.newLine();
					writer.write("										{");
					writer.newLine();
					writer.write("											save(guess);");
					writer.newLine();
					writer.write("											startTime = System.currentTimeMillis();");
					writer.newLine();
					writer.write("										}");
					writer.newLine();
					writer.write("										byte[] answer = md.digest(guess.getBytes());");
					writer.newLine();
					writer.write("										foundPassword = Arrays.equals(answer,password);");
					writer.newLine();
					writer.write("										if (foundPassword == true)");
					writer.newLine();
					writer.write("										{");
					writer.write("											try");
					writer.newLine();
					writer.write("											{");
					writer.newLine();
					writer.write("												FileWriter fstream = new FileWriter(\"../password.txt\");");
					writer.newLine();
					writer.write("												BufferedWriter out = new BufferedWriter(fstream);");
					writer.newLine();
					writer.write("												out.write(guess);");
					writer.newLine();
					writer.write("												out.close();");
					writer.newLine();
					writer.write("											}");
					writer.newLine();
					writer.write("											catch (Exception e)");
					writer.newLine();
					writer.write("											{");
					writer.newLine();
					writer.write("												System.out.println(\"Error: \" + e.getMessage());");
					writer.newLine();
					writer.write("											}");
					writer.newLine();
					writer.write("											System.exit(-1);");
					writer.newLine();
					writer.write("										}");
					writer.newLine();
					writer.write("										guess = guess.substring(0, 7);");
					writer.write("										n++;");
					writer.newLine();
					writer.write("									}");
					writer.newLine();
					writer.write("									guess = guess.substring(0, 6);");
					writer.newLine();
					writer.write("									m++;");
					writer.newLine();
					writer.write("								}");
					writer.newLine();
					writer.write("								guess = guess.substring(0, 5);");
					writer.newLine();
					writer.write("								l++;");
					writer.newLine();
					writer.write("							}");
					writer.newLine();
					writer.write("							guess = guess.substring(0, 4);");
					writer.newLine();
					writer.write("							k++;");
					writer.newLine();
					writer.write("						}");
					writer.newLine();
					writer.write("						guess = guess.substring(0, 3);");
					writer.newLine();
					writer.write("						j++;");
					writer.newLine();
					writer.write("					}");
					writer.newLine();
					writer.write("					guess = guess.substring(0, 2);");
					writer.newLine();
					writer.write("					i++;");
					writer.newLine();
					writer.write("				}");
					writer.newLine();
					writer.write("				guess = guess.substring(0, 1);");
					writer.newLine();
					writer.write("				h++;");
					writer.newLine();
					writer.write("			}");
					writer.newLine();
					writer.write("			System.exit(-1);");
					writer.newLine();
					writer.write("		}");
					writer.newLine();
					writer.write("	}");
					writer.newLine();
					writer.write("}");
					writer.close();
					filesCreatedCounter++;
				}	
			}
			System.out.println(filesCreatedCounter + " files were created.");
			
			for(int i=1; i<=(numberOfDivisions/4-1); i++)
			{
				FileWriter fstream = new FileWriter(i + "/startPasswordHacker.sh");
				BufferedWriter writer = new BufferedWriter(fstream);
				writer.write("#!/bin/bash");
				writer.newLine();
				writer.write("javac PasswordHackerA.java");
				writer.newLine();
				writer.write("javac PasswordHackerB.java");
				writer.newLine();
				writer.write("javac PasswordHackerC.java");
				writer.newLine();
				writer.write("javac PasswordHackerD.java");
				writer.newLine();
				writer.write("nice -n 19 java PasswordHackerA &");
				writer.newLine();
				writer.write("nice -n 19 java PasswordHackerB &");
				writer.newLine();
				writer.write("nice -n 19 java PasswordHackerC &");
				writer.newLine();
				writer.write("nice -n 19 java PasswordHackerD &");
				writer.newLine();
				writer.write("exit 0");
				writer.close();
			}
		}catch(Exception e){
		System.err.println("Error: " + e.getMessage());
		}
	}
}
